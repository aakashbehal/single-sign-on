{"version":3,"file":"static/js/703.ceed834b.chunk.js","mappings":"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","sources":["components/Common/DocumentType.tsx","containers/User/UserAccount.tsx","store/actions/common/types.actions.tsx","store/actions/summary.actions.tsx","webpack://equabli-front-end/./src/components/Common/Common.module.sass?6aa9"],"sourcesContent":["import React, { useEffect, useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { Form, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiFillWarning } from \"react-icons/ai\"\r\nimport { CgSpinnerAlt } from 'react-icons/cg';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport Styles from \"./Common.module.sass\"\r\nimport { TypesActionCreator } from \"../../store/actions/common/types.actions\";\r\n\r\nconst DocumentTypes = forwardRef(({ selectedValue = '', isDisabled = false }: { selectedValue?: string, isDisabled?: boolean }, ref) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        documentTypes,\r\n        loading,\r\n        error\r\n    }: any = useSelector((state: any) => ({\r\n        documentTypes: state.types.documentType.data,\r\n        loading: state.types.documentType.loading,\r\n        error: state.types.documentType.error,\r\n    }))\r\n\r\n    const [value, setValue] = useState(selectedValue)\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        reset() {\r\n            setValue(\"\");\r\n        }\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (documentTypes && documentTypes.length === 0 && !error) {\r\n            dispatch(TypesActionCreator.getDocumentTypes())\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [documentTypes])\r\n\r\n    return (\r\n        <>\r\n            {error &&\r\n                <OverlayTrigger\r\n                    placement=\"right\"\r\n                    delay={{ show: 250, hide: 400 }}\r\n                    overlay={\r\n                        <Tooltip id={`tooltip-error`}>\r\n                            Error in fetching\r\n                        </Tooltip>\r\n                    }\r\n                >\r\n                    <AiFillWarning size={20} className={Styles.details_warning} />\r\n                </OverlayTrigger>\r\n            }\r\n            {\r\n                !error && loading &&\r\n                <CgSpinnerAlt size={20} className={`spinner ${Styles.details_warning}`} />\r\n            }\r\n            <Form.Control\r\n                as=\"select\"\r\n                name=\"document_type\"\r\n                value={value}\r\n                className=\"select_custom\"\r\n                onChange={(e) => { setValue(e.target.value) }}>\r\n                <option hidden disabled>Select Document Type...</option>\r\n                {\r\n                    documentTypes && documentTypes.sort(function (a: any, b: any) {\r\n                        if (a.partnerName < b.partnerName) { return -1; }\r\n                        if (a.partnerName > b.partnerName) { return 1; }\r\n                        return 0;\r\n\r\n                    }).map((agency: any, index: number) => {\r\n                        return (\r\n                            <option\r\n                                key={`agency_${index}`}\r\n                                value={agency.shortCode}\r\n                            >\r\n                                {agency.documentType}\r\n                            </option>\r\n                        )\r\n                    })\r\n                }\r\n            </Form.Control>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default DocumentTypes","import React, { FormEvent, useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Form, Col, Row, Button } from \"react-bootstrap\"\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nimport { userService } from \"../../services\"\r\nimport { MiscActionCreator } from \"../../store/actions/common/misc.actions\"\r\nimport { handleResponse, axiosCustom } from \"../../helpers/util\"\r\nimport { createMessage } from \"../../helpers/messages\";\r\nimport { HiPencil } from \"react-icons/hi\";\r\nimport DocumentUpload from \"../../components/modal/DocumentUpload\";\r\n\r\n\r\nconst UserAccount = () => {\r\n    const formRef = useRef<any>()\r\n    const dispatch = useDispatch()\r\n    const { addToast } = useToasts();\r\n    const [selectedQuestion1, setSelectedQuestion1] = useState<any>(\"\")\r\n    const [selectedQuestion2, setSelectedQuestion2] = useState<any>(\"\")\r\n    const [selectedState, setSelectedState] = useState<any>(\"\")\r\n    const [secretQuestions, setSecretQuestions] = useState<any>([])\r\n    const [secretQuestions1, setSecretQuestions1] = useState<any>([])\r\n    const [secretQuestions2, setSecretQuestions2] = useState<any>([])\r\n    const [userPreferences, setUserPreferences] = useState<any>(null)\r\n    const [emailConsent, setEmailConsent] = useState<any>(false)\r\n    const [phoneConsent, setPhoneConsent] = useState<any>(false)\r\n    const [uploadDocModal, setUploadDocModal] = useState(false)\r\n    const [demoDashboard, setDemoDashboard] = useState<any>(false)\r\n\r\n    const {\r\n        states,\r\n        loadingState,\r\n        errorState,\r\n        app,\r\n        loadingApp,\r\n        errorApp,\r\n        recordStatus,\r\n        loadingRecordStatus,\r\n        errorRecordStatus,\r\n        recordSource,\r\n        loadingRecordSource,\r\n        errorRecordSource,\r\n    } = useSelector((state: any) => ({\r\n        states: state.misc.state.data,\r\n        loadingState: state.misc.state.loading,\r\n        errorState: state.misc.state.error,\r\n        app: state.misc.app.data,\r\n        loadingApp: state.misc.app.loading,\r\n        errorApp: state.misc.app.error,\r\n        recordStatus: state.misc.recordStatus.data,\r\n        loadingRecordStatus: state.misc.recordStatus.loading,\r\n        errorRecordStatus: state.misc.recordStatus.error,\r\n        recordSource: state.misc.recordSource.data,\r\n        loadingRecordSource: state.misc.recordSource.loading,\r\n        errorRecordSource: state.misc.recordSource.error,\r\n    }))\r\n\r\n    useEffect(() => {\r\n        const user = userService.getUser()\r\n        getSecretQuestions()\r\n        getUserPreference(user.loginKey)\r\n        dispatch(MiscActionCreator.getStates())\r\n        dispatch(MiscActionCreator.getAppId('ECP-WEB'))\r\n        dispatch(MiscActionCreator.getRecordStatus('Enabled'))\r\n        dispatch(MiscActionCreator.getRecordSource('ECP-WB'))\r\n        const demo = localStorage.getItem('isDemo')\r\n        if (demo && demo === 'true') {\r\n            setDemoDashboard(true)\r\n        } else {\r\n            setDemoDashboard(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [userPreferences])\r\n\r\n    useEffect(() => {\r\n        const sqFiltered = secretQuestions.filter((sQ: any) => {\r\n            if (sQ.keycode !== selectedQuestion1) {\r\n                return sQ\r\n            }\r\n        })\r\n        setSecretQuestions2(sqFiltered)\r\n    }, [selectedQuestion1])\r\n\r\n    useEffect(() => {\r\n        const sqFiltered = secretQuestions.filter((sQ: any) => {\r\n            if (sQ.keycode !== selectedQuestion2) {\r\n                return sQ\r\n            }\r\n        })\r\n        setSecretQuestions1(sqFiltered)\r\n    }, [selectedQuestion2])\r\n\r\n    const getUserPreference = async (loginKey: any) => {\r\n        try {\r\n\r\n            const response: any = await axiosCustom.get(`${process.env.REACT_APP_BASE_URL}/${process.env.REACT_APP_USER_SERVICE}/v1/users/getUserPreference?loginKey=${loginKey}`)\r\n            const data = handleResponse(response)\r\n            setUserPreferences(data.response)\r\n            setSelectedState(data.response.state)\r\n            setSelectedQuestion1(data.response.secretAnswers[0].question)\r\n            setSelectedQuestion2(data.response.secretAnswers[1].question)\r\n            userService.setImage(data.response.profilePicture)\r\n        } catch (error: any) {\r\n            setSecretQuestions([])\r\n        }\r\n    }\r\n\r\n    const getSecretQuestions = async () => {\r\n        try {\r\n            const response: any = await axiosCustom.get(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_COMMON_URL}/getLookUpListByGroupKeyVal/secret_question`)\r\n            const data = handleResponse(response)\r\n            setSecretQuestions(data.response)\r\n            setSecretQuestions1(data.response)\r\n            setSecretQuestions2(data.response)\r\n        } catch (error: any) {\r\n            setSecretQuestions([])\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = async (e: FormEvent) => {\r\n        e.preventDefault()\r\n        const userData = userService.getUser()\r\n        const {\r\n            communicationEmail,\r\n            contactNumber,\r\n            address1,\r\n            address2,\r\n            city,\r\n            zip,\r\n            answer1,\r\n            answer2\r\n        } = formRef.current\r\n        const stateName = states.filter((s: any) => {\r\n            if (s.stateCode === selectedState) {\r\n                return s\r\n            }\r\n        })\r\n        const reqBody = {\r\n            \"principleId\": userData.principleId,\r\n            \"loginKey\": userData.loginKey,\r\n            \"emailAddress\": communicationEmail.value,\r\n            \"emailConsent\": emailConsent,\r\n            \"phone\": contactNumber.value,\r\n            \"phoneConsent\": phoneConsent,\r\n            \"address1\": address1.value,\r\n            \"address2\": address2.value,\r\n            \"city\": city.value,\r\n            \"state\": selectedState,\r\n            \"stateName\": stateName[0].fullName,\r\n            \"zip\": zip.value,\r\n            \"secretAnswers\": [\r\n                {\r\n                    \"secretAnswerId\": userPreferences.secretAnswers[0].secretAnswerId,\r\n                    \"principleId\": userData.principleId,\r\n                    \"question\": \"Q1\",\r\n                    \"answer\": answer1.value,\r\n                    \"updatedBy\": userData.loginKey,\r\n                    \"recordSourceId\": recordSource.recordSourceId,\r\n                    \"appId\": app.appId\r\n                },\r\n                {\r\n                    \"secretAnswerId\": userPreferences.secretAnswers[1].secretAnswerId,\r\n                    \"principleId\": userData.principleId,\r\n                    \"question\": \"Q3\",\r\n                    \"answer\": answer2.value,\r\n                    \"updatedBy\": userData.loginKey,\r\n                    \"recordSourceId\": recordSource.recordSourceId,\r\n                    \"appId\": app.appId\r\n                }\r\n            ]\r\n        }\r\n        try {\r\n            const response: any = await axiosCustom.post(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_COMPLIANCE_SEARCH_URL}/updateUserPreference`, reqBody)\r\n            const data = handleResponse(response)\r\n            addToast(createMessage('success', `updated`, 'User details'), { appearance: 'success', autoDismiss: true })\r\n        } catch (error: any) {\r\n            addToast(createMessage('error', `updating`, 'user details'), { appearance: 'error', autoDismiss: false })\r\n        }\r\n    }\r\n\r\n    const toggleDemo = (isChecked: any) => {\r\n        localStorage.setItem('isDemo', isChecked)\r\n        setDemoDashboard(isChecked)\r\n    }\r\n\r\n\r\n    return <>\r\n        <Row style={{ margin: 0, paddingTop: '2rem' }} className=\"form_container\">\r\n            <Col sm={2}></Col>\r\n            <Col sm={2}>\r\n                {\r\n                    userPreferences\r\n                    &&\r\n                    <div className=\"profile_picture_container\">\r\n                        <div>\r\n                            <img src={userPreferences?.profilePicture} alt=\"\" loading=\"lazy\" />\r\n                            <div onClick={() => setUploadDocModal(true)} className=\"edit_profile_pic\" ><HiPencil /></div>\r\n                            <h5>{`${userPreferences?.firstName} ${userPreferences?.middleName} ${userPreferences?.lastName}`}</h5>\r\n                            <p>{userPreferences.emailAddress}</p>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </Col>\r\n            <Col sm={6} >\r\n                {\r\n                    userPreferences\r\n                    &&\r\n                    <Form onSubmit={(e) => onSubmitHandler(e)} ref={formRef}>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Email User ID</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Email User ID\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.emailAddress} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Organization Type</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Organization Type\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.recordSource} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {\r\n                            userPreferences.recordSource !== 'Equabli'\r\n                            && <Row >\r\n                                <Col sm={12}>\r\n                                    <Form.Group as={Row}>\r\n                                        <Form.Label column md={4} sm={12}>{userPreferences.recordSource === 'Partner' ? 'Partner Name' : 'Client Name'}</Form.Label>\r\n                                        <Col sm={8}>\r\n                                            <Form.Control type=\"text\"\r\n                                                placeholder=\"Client Name\"\r\n                                                disabled={true}\r\n                                                defaultValue={userPreferences.recordSource === 'Partner' ? userPreferences.partnerName : userPreferences.clientName} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Role Type</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Role Type\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.authRoleName} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Name</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Name\"\r\n                                            disabled={true}\r\n                                            defaultValue={`${userPreferences.firstName} ${userPreferences.middleName} ${userPreferences.lastName}`} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Communication Email ID</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"communicationEmail\"\r\n                                            placeholder=\"Communication Email ID\"\r\n                                            defaultValue={userPreferences.emailAddress} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Communication Email Consent</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"switch\"\r\n                                            onChange={(e) => setEmailConsent((emailConsent: any) => !emailConsent)}\r\n                                            name=\"emailConsent\"\r\n                                            defaultChecked={Boolean(userPreferences.emailConsent)}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row> */}\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Contact Number</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"contactNumber\"\r\n                                            placeholder=\"Contact Number\"\r\n                                            defaultValue={userPreferences.phone} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Contact Number Consent</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"switch\"\r\n                                            onChange={(e) => setPhoneConsent((phoneConsent: any) => !phoneConsent)}\r\n                                            name=\"phoneConsent\"\r\n                                            defaultChecked={Boolean(userPreferences.phoneConsent)}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row> */}\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Address Line 1</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"address1\"\r\n                                            placeholder=\"Address 1\"\r\n                                            defaultValue={userPreferences.address1} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Address Line 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"address2\"\r\n                                            placeholder=\"Address 2\"\r\n                                            defaultValue={userPreferences.address2} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>City</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"city\"\r\n                                            placeholder=\"City\"\r\n                                            defaultValue={userPreferences.city} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>State</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"state\"\r\n                                            value={selectedState}\r\n                                            onChange={(e) => { setSelectedState(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                states && states.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.stateCode}\r\n                                                        >\r\n                                                            {sQ.fullName}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Zip Code</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"zip\"\r\n                                            placeholder=\"Zip Code\"\r\n                                            defaultValue={userPreferences.zip} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Secret Question 1 </Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"selectedQuestion1\"\r\n                                            value={selectedQuestion1}\r\n                                            onChange={(e) => { setSelectedQuestion1(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                secretQuestions1 && secretQuestions1.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.keycode}\r\n                                                        >\r\n                                                            {sQ.keyvalue}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Answer 1</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"answer1\"\r\n                                            placeholder=\"Answer 1\" />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Secret Question 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"selectedQuestion2\"\r\n                                            value={selectedQuestion2}\r\n                                            onChange={(e) => { setSelectedQuestion2(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                secretQuestions2 && secretQuestions2.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.keycode}\r\n                                                        >\r\n                                                            {sQ.keyvalue}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Answer 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"answer2\"\r\n                                            placeholder=\"Answer 2\" />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* {\r\n                            window.location.host !== 'stage.equabli.net'\r\n                            && window.location.host !== 'www.equabli.net'\r\n                            && <Row >\r\n                                <Col sm={12}>\r\n                                    <Form.Group as={Row}>\r\n                                        <Form.Label column md={4} sm={12}>Demo</Form.Label>\r\n                                        <Col sm={8}>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className=\"switch\"\r\n                                                name=\"isNoRangeFix\"\r\n                                                checked={demoDashboard}\r\n                                                onChange={(e) => toggleDemo(e.target.checked)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        } */}\r\n                        <Col sm={12}>\r\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <Button variant=\"dark\" style={{ marginRight: '10px' }} type=\"submit\">Submit</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Form>\r\n                }\r\n            </Col>\r\n            <Col sm={2}></Col>\r\n        </Row>\r\n        {\r\n            uploadDocModal\r\n            && <DocumentUpload\r\n                show={uploadDocModal}\r\n                onHide={() => setUploadDocModal(false)}\r\n                accountId={123}\r\n                Styles={{}}\r\n                parentComponent=\"profile\"\r\n                search={() => getUserPreference(userPreferences.loginKey)} />\r\n        }\r\n    </>\r\n}\r\n\r\nexport default UserAccount","import {\r\n    DocTypes,\r\n    CommunicationType,\r\n    BankruptcyType,\r\n    DocumentsType,\r\n    ProductTypes\r\n} from \"../../types.d\";\r\nimport { commonServices } from \"../../../services\"\r\n\r\nexport const TypesActionCreator = {\r\n\r\n    getDocTypes: (type: any) => (dispatch: any) => {\r\n        const request = () => ({ type: DocTypes.DOC_TYPES_REQUEST })\r\n        const success = (compliance: any) => ({ type: DocTypes.DOC_TYPES_SUCCESS, payload: compliance })\r\n        const failure = (error: any) => ({ type: DocTypes.DOC_TYPES_FAILURE, payload: error })\r\n\r\n        dispatch(request())\r\n\r\n        commonServices.getFilterTypes(type)\r\n            .then(\r\n                compliance => {\r\n                    compliance.sort((a: any, b: any) => {\r\n                        if (a.keyvalue > b.keyvalue) return 1\r\n                        else if (a.keyvalue < b.keyvalue) return -1\r\n                        else return 0\r\n                    })\r\n                    dispatch(success(compliance))\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                }\r\n            )\r\n    },\r\n    getCommunicationType: (type: any) => (dispatch: any) => {\r\n        const request = () => ({ type: CommunicationType.COMMUNICATION_TYPE_REQUEST })\r\n        const success = (types: any) => ({ type: CommunicationType.COMMUNICATION_TYPE_SUCCESS, payload: types })\r\n        const failure = (error: any) => ({ type: CommunicationType.COMMUNICATION_TYPE_FAILURE, payload: error })\r\n\r\n        dispatch(request())\r\n\r\n        commonServices.getFilterTypes(type)\r\n            .then(\r\n                types => {\r\n                    dispatch(success(types))\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                }\r\n            )\r\n    },\r\n    getBankruptcyType: () => (dispatch: any) => {\r\n        const request = () => ({ type: BankruptcyType.BANKRUPTCY_TYPE_REQUEST })\r\n        const success = (compliance: any) => ({ type: BankruptcyType.BANKRUPTCY_TYPE_SUCCESS, payload: compliance })\r\n        const failure = (error: any) => ({ type: BankruptcyType.BANKRUPTCY_TYPE_FAILURE, payload: error })\r\n\r\n        dispatch(request())\r\n\r\n        commonServices.getFilterTypes(`bankruptcy_type`)\r\n            .then(\r\n                compliance => {\r\n                    dispatch(success(compliance))\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                }\r\n            )\r\n    },\r\n    getDocumentTypes: () => (dispatch: any) => {\r\n        const request = () => ({ type: DocumentsType.DOCUMENTS_TYPE_REQUEST })\r\n        const success = (compliance: any) => ({ type: DocumentsType.DOCUMENTS_TYPE_SUCCESS, payload: compliance })\r\n        const failure = (error: any) => ({ type: DocumentsType.DOCUMENTS_TYPE_FAILURE, payload: error })\r\n\r\n        dispatch(request())\r\n\r\n        commonServices.getDocumentTypes()\r\n            .then(\r\n                compliance => {\r\n                    dispatch(success(compliance))\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                }\r\n            )\r\n    },\r\n    getProductTypes: () => (dispatch: any) => {\r\n        const request = () => ({ type: ProductTypes.PRODUCT_TYPE_REQUEST })\r\n        const success = (products: any) => ({ type: ProductTypes.PRODUCT_TYPE_SUCCESS, payload: products })\r\n        const failure = (error: any) => ({ type: ProductTypes.PRODUCT_TYPE_FAILURE, payload: error })\r\n\r\n        dispatch(request())\r\n\r\n        commonServices.getProductTypes()\r\n            .then(\r\n                products => {\r\n                    dispatch(success(products))\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                }\r\n            )\r\n    }\r\n}\r\n","import {\r\n    RequestedDocumentSummary,\r\n    SentDocumentSummary,\r\n    ReRender,\r\n    DocumentCoverage,\r\n    DocumentSummaryDocuments,\r\n    DocumentSummaryDocumentsNot\r\n} from \"../types.d\";\r\nimport { summaryService } from \"../../services\"\r\n\r\nexport const SummaryActionCreator = {\r\n    // getReceiveSummary: () => (dispatch: any) => {\r\n    //     const request = () => ({ type: RequestedDocumentSummary.REQUESTED_DOCUMENT_SUMMARY_REQUEST, payload: [] })\r\n    //     const success = (data: any) => ({ type: RequestedDocumentSummary.REQUESTED_DOCUMENT_SUMMARY_SUCCESS, payload: data })\r\n    //     const failure = () => ({ type: RequestedDocumentSummary.REQUESTED_DOCUMENT_SUMMARY_FAILURE, payload: [] })\r\n\r\n    //     dispatch(request())\r\n\r\n    //     summaryService.getReceiveSummary()\r\n    //         .then(\r\n    //             data => {\r\n    //                 dispatch(success(data))\r\n    //             },\r\n    //             error => {\r\n    //                 dispatch(failure())\r\n    //             }\r\n    //         )\r\n    // },\r\n    getSentSummary: (payload: any) => (dispatch: any) => {\r\n        const request = () => ({ type: SentDocumentSummary.SENT_DOCUMENT_SUMMARY_REQUEST, payload: [] })\r\n        const success = (data: any) => ({ type: SentDocumentSummary.SENT_DOCUMENT_SUMMARY_SUCCESS, payload: data })\r\n        const failure = () => ({ type: SentDocumentSummary.SENT_DOCUMENT_SUMMARY_FAILURE, payload: [] })\r\n\r\n        dispatch(request())\r\n\r\n        summaryService.getSentSummary(payload)\r\n            .then(\r\n                data => {\r\n                    dispatch(success(data))\r\n                },\r\n                error => {\r\n                    dispatch(failure())\r\n                }\r\n            )\r\n    },\r\n    getDocumentCoverage: (payload: any) => (dispatch: any) => {\r\n        const request = () => ({ type: DocumentCoverage.DOCUMENT_COVERAGE_REQUEST, payload: [] })\r\n        const success = (data: any) => ({ type: DocumentCoverage.DOCUMENT_COVERAGE_SUCCESS, payload: data })\r\n        const failure = () => ({ type: DocumentCoverage.DOCUMENT_COVERAGE_FAILURE, payload: [] })\r\n\r\n        dispatch(request())\r\n\r\n        summaryService.getDocumentCoverage(payload)\r\n            .then(\r\n                data => {\r\n                    dispatch(success(data))\r\n                },\r\n                error => {\r\n                    dispatch(failure())\r\n                }\r\n            )\r\n    },\r\n    resetDocumentSummary: () => (dispatch: any) => {\r\n        dispatch({ type: DocumentCoverage.DOCUMENT_COVERAGE_RESET })\r\n    },\r\n    getSummaryDrillDown: (payload: any) => (dispatch: any) => {\r\n        const request = () => ({ type: DocumentSummaryDocuments.DOCUMENT_SUMMARY_DOCUMENTS_REQUEST, payload: [] })\r\n        const success = (data: any) => ({ type: DocumentSummaryDocuments.DOCUMENT_SUMMARY_DOCUMENTS_SUCCESS, payload: data })\r\n        const failure = () => ({ type: DocumentSummaryDocuments.DOCUMENT_SUMMARY_DOCUMENTS_FAILURE, payload: [] })\r\n\r\n        dispatch(request())\r\n\r\n        summaryService.getSummaryDrillDown(payload)\r\n            .then(\r\n                data => {\r\n                    dispatch(success(data))\r\n                },\r\n                error => {\r\n                    dispatch(failure())\r\n                }\r\n            )\r\n    },\r\n    getSummaryDrillDownNot: (payload: any) => (dispatch: any) => {\r\n        const request = () => ({ type: DocumentSummaryDocumentsNot.DOCUMENT_SUMMARY_DOCUMENTS_NOT_REQUEST, payload: [] })\r\n        const success = (data: any) => ({ type: DocumentSummaryDocumentsNot.DOCUMENT_SUMMARY_DOCUMENTS_NOT_SUCCESS, payload: data })\r\n        const failure = () => ({ type: DocumentSummaryDocumentsNot.DOCUMENT_SUMMARY_DOCUMENTS_NOT_FAILURE, payload: [] })\r\n\r\n        dispatch(request())\r\n\r\n        summaryService.getSummaryDrillDownNot(payload)\r\n            .then(\r\n                data => {\r\n                    dispatch(success(data))\r\n                },\r\n                error => {\r\n                    dispatch(failure())\r\n                }\r\n            )\r\n    },\r\n    reRender: () => (dispatch: any) => {\r\n        dispatch({ type: ReRender.RE_RENDER_REQUEST })\r\n        setTimeout(() => {\r\n            dispatch({ type: ReRender.RE_RENDER_RESET })\r\n        }, 1000)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"details_warning\":\"Common_details_warning__UIudb\",\"form_multiple\":\"Common_form_multiple__7aB9L\",\"tag_item\":\"Common_tag_item__ACcHt\",\"tag_item_button\":\"Common_tag_item_button__VWRtM\",\"error\":\"Common_error__jbfwv\"};"],"names":["DocumentTypes","forwardRef","_ref","ref","_ref$selectedValue","selectedValue","dispatch","isDisabled","useDispatch","_useSelector","useSelector","state","documentTypes","types","documentType","data","loading","error","_useState","useState","_useState2","_slicedToArray","value","setValue","useImperativeHandle","reset","useEffect","length","TypesActionCreator","getDocumentTypes","_jsxs","_Fragment","children","_jsx","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","id","AiFillWarning","size","className","Styles","details_warning","CgSpinnerAlt","concat","Form","Control","as","name","onChange","e","target","hidden","disabled","sort","a","b","partnerName","map","agency","index","shortCode","formRef","useRef","addToast","useToasts","selectedQuestion1","setSelectedQuestion1","_useState3","_useState4","selectedQuestion2","setSelectedQuestion2","_useState5","_useState6","selectedState","setSelectedState","_useState7","_useState8","secretQuestions","setSecretQuestions","_useState9","_useState10","secretQuestions1","setSecretQuestions1","_useState11","_useState12","secretQuestions2","setSecretQuestions2","_useState13","_useState14","userPreferences","setUserPreferences","_useState15","_useState16","emailConsent","_useState17","_useState18","phoneConsent","_useState19","_useState20","uploadDocModal","setUploadDocModal","_useState21","_useState22","setDemoDashboard","states","misc","loadingState","errorState","app","loadingApp","errorApp","recordStatus","loadingRecordStatus","errorRecordStatus","recordSource","loadingRecordSource","errorRecordSource","user","userService","getUser","getSecretQuestions","getUserPreference","loginKey","MiscActionCreator","getStates","getAppId","getRecordStatus","getRecordSource","demo","localStorage","getItem","sqFiltered","filter","sQ","keycode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axiosCustom","get","process","sent","handleResponse","secretAnswers","question","setImage","profilePicture","t0","stop","_x","apply","arguments","_ref2","_callee2","_context2","REACT_APP_COMMON_URL","onSubmitHandler","_ref3","_callee3","userData","_formRef$current","communicationEmail","contactNumber","address1","address2","city","zip","answer1","answer2","stateName","reqBody","_context3","preventDefault","current","s","stateCode","principleId","fullName","secretAnswerId","recordSourceId","appId","post","REACT_APP_COMPLIANCE_SEARCH_URL","createMessage","appearance","autoDismiss","_x2","Row","style","margin","paddingTop","Col","sm","src","alt","onClick","HiPencil","firstName","middleName","lastName","emailAddress","onSubmit","Group","Label","column","md","type","placeholder","defaultValue","clientName","authRoleName","phone","keyvalue","display","justifyContent","Button","variant","marginRight","DocumentUpload","onHide","accountId","parentComponent","search","getDocTypes","DocTypes","DOC_TYPES_REQUEST","commonServices","getFilterTypes","then","compliance","DOC_TYPES_SUCCESS","payload","success","DOC_TYPES_FAILURE","failure","getCommunicationType","CommunicationType","COMMUNICATION_TYPE_REQUEST","COMMUNICATION_TYPE_SUCCESS","COMMUNICATION_TYPE_FAILURE","getBankruptcyType","BankruptcyType","BANKRUPTCY_TYPE_REQUEST","BANKRUPTCY_TYPE_SUCCESS","BANKRUPTCY_TYPE_FAILURE","DocumentsType","DOCUMENTS_TYPE_REQUEST","DOCUMENTS_TYPE_SUCCESS","DOCUMENTS_TYPE_FAILURE","getProductTypes","ProductTypes","PRODUCT_TYPE_REQUEST","products","PRODUCT_TYPE_SUCCESS","PRODUCT_TYPE_FAILURE","SummaryActionCreator","getSentSummary","SentDocumentSummary","SENT_DOCUMENT_SUMMARY_REQUEST","summaryService","SENT_DOCUMENT_SUMMARY_SUCCESS","SENT_DOCUMENT_SUMMARY_FAILURE","getDocumentCoverage","DocumentCoverage","DOCUMENT_COVERAGE_REQUEST","DOCUMENT_COVERAGE_SUCCESS","DOCUMENT_COVERAGE_FAILURE","resetDocumentSummary","DOCUMENT_COVERAGE_RESET","getSummaryDrillDown","DocumentSummaryDocuments","DOCUMENT_SUMMARY_DOCUMENTS_REQUEST","DOCUMENT_SUMMARY_DOCUMENTS_SUCCESS","DOCUMENT_SUMMARY_DOCUMENTS_FAILURE","getSummaryDrillDownNot","DocumentSummaryDocumentsNot","DOCUMENT_SUMMARY_DOCUMENTS_NOT_REQUEST","DOCUMENT_SUMMARY_DOCUMENTS_NOT_SUCCESS","DOCUMENT_SUMMARY_DOCUMENTS_NOT_FAILURE","reRender","ReRender","RE_RENDER_REQUEST","setTimeout","RE_RENDER_RESET"],"sourceRoot":""}