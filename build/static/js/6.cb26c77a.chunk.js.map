{"version":3,"sources":["containers/User/UserAccount.tsx"],"names":["UserAccount","formRef","useRef","dispatch","useDispatch","addToast","useToasts","useState","selectedQuestion1","setSelectedQuestion1","selectedQuestion2","setSelectedQuestion2","selectedState","setSelectedState","secretQuestions","setSecretQuestions","secretQuestions1","setSecretQuestions1","secretQuestions2","setSecretQuestions2","userPreferences","setUserPreferences","emailConsent","phoneConsent","demoDashboard","setDemoDashboard","useSelector","state","states","misc","data","loadingState","loading","errorState","error","app","loadingApp","errorApp","recordStatus","loadingRecordStatus","errorRecordStatus","recordSource","loadingRecordSource","errorRecordSource","useEffect","user","userService","getUser","getSecretQuestions","getUserPreference","loginKey","MiscActionCreator","getStates","getAppId","getRecordStatus","getRecordSource","demo","localStorage","getItem","sqFiltered","filter","sQ","keycode","a","axiosCustom","get","process","response","handleResponse","secretAnswers","question","onSubmitHandler","e","preventDefault","userData","current","communicationEmail","contactNumber","address1","address2","city","zip","answer1","answer2","stateName","s","stateCode","reqBody","principleId","value","fullName","secretAnswerId","recordSourceId","appId","post","createMessage","appearance","autoDismiss","style","margin","className","sm","onSubmit","ref","Group","as","Row","Label","column","md","Control","type","placeholder","disabled","defaultValue","emailAddress","partnerName","clientName","authRoleName","firstName","middleName","lastName","name","phone","onChange","target","map","index","keyvalue","window","location","host","checked","isChecked","setItem","display","justifyContent","variant","marginRight"],"mappings":"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","file":"static/js/6.cb26c77a.chunk.js","sourcesContent":["import React, { FormEvent, useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Form, Col, Row, Button } from \"react-bootstrap\"\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nimport { userService } from \"../../services\"\r\nimport { MiscActionCreator } from \"../../store/actions/common/misc.actions\"\r\nimport { handleResponse, axiosCustom } from \"../../helpers/util\"\r\nimport { createMessage } from \"../../helpers/messages\";\r\n\r\n\r\nconst UserAccount = () => {\r\n    const formRef = useRef<any>()\r\n    const dispatch = useDispatch()\r\n    const { addToast } = useToasts();\r\n    const [selectedQuestion1, setSelectedQuestion1] = useState<any>(\"\")\r\n    const [selectedQuestion2, setSelectedQuestion2] = useState<any>(\"\")\r\n    const [selectedState, setSelectedState] = useState<any>(\"\")\r\n    const [secretQuestions, setSecretQuestions] = useState<any>([])\r\n    const [secretQuestions1, setSecretQuestions1] = useState<any>([])\r\n    const [secretQuestions2, setSecretQuestions2] = useState<any>([])\r\n    const [userPreferences, setUserPreferences] = useState<any>(null)\r\n    const [emailConsent, setEmailConsent] = useState<any>(false)\r\n    const [phoneConsent, setPhoneConsent] = useState<any>(false)\r\n    const [demoDashboard, setDemoDashboard] = useState<any>(false)\r\n\r\n    const {\r\n        states,\r\n        loadingState,\r\n        errorState,\r\n        app,\r\n        loadingApp,\r\n        errorApp,\r\n        recordStatus,\r\n        loadingRecordStatus,\r\n        errorRecordStatus,\r\n        recordSource,\r\n        loadingRecordSource,\r\n        errorRecordSource,\r\n    } = useSelector((state: any) => ({\r\n        states: state.misc.state.data,\r\n        loadingState: state.misc.state.loading,\r\n        errorState: state.misc.state.error,\r\n        app: state.misc.app.data,\r\n        loadingApp: state.misc.app.loading,\r\n        errorApp: state.misc.app.error,\r\n        recordStatus: state.misc.recordStatus.data,\r\n        loadingRecordStatus: state.misc.recordStatus.loading,\r\n        errorRecordStatus: state.misc.recordStatus.error,\r\n        recordSource: state.misc.recordSource.data,\r\n        loadingRecordSource: state.misc.recordSource.loading,\r\n        errorRecordSource: state.misc.recordSource.error,\r\n    }))\r\n\r\n    useEffect(() => {\r\n        const user = userService.getUser()\r\n        getSecretQuestions()\r\n        getUserPreference(user.loginKey)\r\n        dispatch(MiscActionCreator.getStates())\r\n        dispatch(MiscActionCreator.getAppId('ECP-WEB'))\r\n        dispatch(MiscActionCreator.getRecordStatus('Enabled'))\r\n        dispatch(MiscActionCreator.getRecordSource('ECP-WB'))\r\n        const demo = localStorage.getItem('isDemo')\r\n        if (demo && demo === 'true') {\r\n            setDemoDashboard(true)\r\n        } else {\r\n            setDemoDashboard(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [userPreferences])\r\n\r\n    useEffect(() => {\r\n        const sqFiltered = secretQuestions.filter((sQ: any) => {\r\n            if (sQ.keycode !== selectedQuestion1) {\r\n                return sQ\r\n            }\r\n        })\r\n        setSecretQuestions2(sqFiltered)\r\n    }, [selectedQuestion1])\r\n\r\n    useEffect(() => {\r\n        const sqFiltered = secretQuestions.filter((sQ: any) => {\r\n            if (sQ.keycode !== selectedQuestion2) {\r\n                return sQ\r\n            }\r\n        })\r\n        setSecretQuestions1(sqFiltered)\r\n    }, [selectedQuestion2])\r\n\r\n    const getUserPreference = async (loginKey: any) => {\r\n        try {\r\n            const response: any = await axiosCustom.get(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_COMPLIANCE_SEARCH_URL}/getUserPreference?loginKey=${loginKey}`)\r\n            const data = handleResponse(response)\r\n            setUserPreferences(data.response)\r\n            setSelectedState(data.response.state)\r\n            setSelectedQuestion1(data.response.secretAnswers[0].question)\r\n            setSelectedQuestion2(data.response.secretAnswers[1].question)\r\n        } catch (error: any) {\r\n            setSecretQuestions([])\r\n        }\r\n    }\r\n\r\n\r\n    const getSecretQuestions = async () => {\r\n        try {\r\n            const response: any = await axiosCustom.get(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_COMMON_URL}/getLookUpListByGroupKeyVal/secret_question`)\r\n            const data = handleResponse(response)\r\n            setSecretQuestions(data.response)\r\n            setSecretQuestions1(data.response)\r\n            setSecretQuestions2(data.response)\r\n        } catch (error: any) {\r\n            setSecretQuestions([])\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = async (e: FormEvent) => {\r\n        e.preventDefault()\r\n        const userData = userService.getUser()\r\n        const {\r\n            communicationEmail,\r\n            contactNumber,\r\n            address1,\r\n            address2,\r\n            city,\r\n            zip,\r\n            answer1,\r\n            answer2\r\n        } = formRef.current\r\n        const stateName = states.filter((s: any) => {\r\n            if (s.stateCode === selectedState) {\r\n                return s\r\n            }\r\n        })\r\n        const reqBody = {\r\n            \"principleId\": userData.principleId,\r\n            \"loginKey\": userData.loginKey,\r\n            \"emailAddress\": communicationEmail.value,\r\n            \"emailConsent\": emailConsent,\r\n            \"phone\": contactNumber.value,\r\n            \"phoneConsent\": phoneConsent,\r\n            \"address1\": address1.value,\r\n            \"address2\": address2.value,\r\n            \"city\": city.value,\r\n            \"state\": selectedState,\r\n            \"stateName\": stateName[0].fullName,\r\n            \"zip\": zip.value,\r\n            \"secretAnswers\": [\r\n                {\r\n                    \"secretAnswerId\": userPreferences.secretAnswers[0].secretAnswerId,\r\n                    \"principleId\": userData.principleId,\r\n                    \"question\": \"Q1\",\r\n                    \"answer\": answer1.value,\r\n                    \"updatedBy\": userData.loginKey,\r\n                    \"recordSourceId\": recordSource.recordSourceId,\r\n                    \"appId\": app.appId\r\n                },\r\n                {\r\n                    \"secretAnswerId\": userPreferences.secretAnswers[1].secretAnswerId,\r\n                    \"principleId\": userData.principleId,\r\n                    \"question\": \"Q3\",\r\n                    \"answer\": answer2.value,\r\n                    \"updatedBy\": userData.loginKey,\r\n                    \"recordSourceId\": recordSource.recordSourceId,\r\n                    \"appId\": app.appId\r\n                }\r\n            ]\r\n        }\r\n        try {\r\n            const response: any = await axiosCustom.post(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_COMPLIANCE_SEARCH_URL}/updateUserPreference`, reqBody)\r\n            const data = handleResponse(response)\r\n            addToast(createMessage('success', `updated`, 'User details'), { appearance: 'success', autoDismiss: true })\r\n        } catch (error: any) {\r\n            addToast(createMessage('error', `updating`, 'user details'), { appearance: 'error', autoDismiss: false })\r\n        }\r\n    }\r\n\r\n    const toggleDemo = (isChecked) => {\r\n        localStorage.setItem('isDemo', isChecked)\r\n        setDemoDashboard(isChecked)\r\n    }\r\n\r\n    return <>\r\n        <Row style={{ margin: 0 }} className=\"form_container\">\r\n            <Col sm={3}></Col>\r\n            <Col sm={6} >\r\n                {\r\n                    userPreferences\r\n                    &&\r\n                    <Form onSubmit={(e) => onSubmitHandler(e)} ref={formRef}>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Email User ID</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Email User ID\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.emailAddress} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Organization Type</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Organization Type\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.recordSource} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {\r\n                            userPreferences.recordSource !== 'Equabli'\r\n                            && <Row >\r\n                                <Col sm={12}>\r\n                                    <Form.Group as={Row}>\r\n                                        <Form.Label column md={4} sm={12}>{userPreferences.recordSource === 'Partner' ? 'Partner Name' : 'Client Name'}</Form.Label>\r\n                                        <Col sm={8}>\r\n                                            <Form.Control type=\"text\"\r\n                                                placeholder=\"Client Name\"\r\n                                                disabled={true}\r\n                                                defaultValue={userPreferences.recordSource === 'Partner' ? userPreferences.partnerName : userPreferences.clientName} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Role Type</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Role Type\"\r\n                                            disabled={true}\r\n                                            defaultValue={userPreferences.authRoleName} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Name</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            placeholder=\"Name\"\r\n                                            disabled={true}\r\n                                            defaultValue={`${userPreferences.firstName} ${userPreferences.middleName} ${userPreferences.lastName}`} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Communication Email ID</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"communicationEmail\"\r\n                                            placeholder=\"Communication Email ID\"\r\n                                            defaultValue={userPreferences.emailAddress} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Communication Email Consent</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"switch\"\r\n                                            onChange={(e) => setEmailConsent((emailConsent: any) => !emailConsent)}\r\n                                            name=\"emailConsent\"\r\n                                            defaultChecked={Boolean(userPreferences.emailConsent)}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row> */}\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Contact Number</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"contactNumber\"\r\n                                            placeholder=\"Contact Number\"\r\n                                            defaultValue={userPreferences.phone} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Contact Number Consent</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"switch\"\r\n                                            onChange={(e) => setPhoneConsent((phoneConsent: any) => !phoneConsent)}\r\n                                            name=\"phoneConsent\"\r\n                                            defaultChecked={Boolean(userPreferences.phoneConsent)}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row> */}\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Address Line 1</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"address1\"\r\n                                            placeholder=\"Address 1\"\r\n                                            defaultValue={userPreferences.address1} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Address Line 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"address2\"\r\n                                            placeholder=\"Address 2\"\r\n                                            defaultValue={userPreferences.address2} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>City</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"city\"\r\n                                            placeholder=\"City\"\r\n                                            defaultValue={userPreferences.city} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>State</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"state\"\r\n                                            value={selectedState}\r\n                                            onChange={(e) => { setSelectedState(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                states && states.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.stateCode}\r\n                                                        >\r\n                                                            {sQ.fullName}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Zip Code</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"zip\"\r\n                                            placeholder=\"Zip Code\"\r\n                                            defaultValue={userPreferences.zip} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Secret Question 1 </Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"selectedQuestion1\"\r\n                                            value={selectedQuestion1}\r\n                                            onChange={(e) => { setSelectedQuestion1(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                secretQuestions1 && secretQuestions1.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.keycode}\r\n                                                        >\r\n                                                            {sQ.keyvalue}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Answer 1</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"answer1\"\r\n                                            placeholder=\"Answer 1\" />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Secret Question 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"selectedQuestion2\"\r\n                                            value={selectedQuestion2}\r\n                                            onChange={(e) => { setSelectedQuestion2(e.target.value) }}\r\n                                        >\r\n                                            <option></option>\r\n                                            {\r\n                                                secretQuestions2 && secretQuestions2.map((sQ: any, index: number) => {\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={`secretQuestion_${index}`}\r\n                                                            value={sQ.keycode}\r\n                                                        >\r\n                                                            {sQ.keyvalue}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col sm={12}>\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column md={4} sm={12}>Answer 2</Form.Label>\r\n                                    <Col sm={8}>\r\n                                        <Form.Control type=\"text\"\r\n                                            name=\"answer2\"\r\n                                            placeholder=\"Answer 2\" />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        {\r\n                            window.location.host !== 'stage.equabli.net'\r\n                            && window.location.host !== 'www.equabli.net'\r\n                            && <Row >\r\n                                <Col sm={12}>\r\n                                    <Form.Group as={Row}>\r\n                                        <Form.Label column md={4} sm={12}>Demo</Form.Label>\r\n                                        <Col sm={8}>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className=\"switch\"\r\n                                                name=\"isNoRangeFix\"\r\n                                                checked={demoDashboard}\r\n                                                onChange={(e) => toggleDemo(e.target.checked)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                        <Col sm={12}>\r\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <Button variant=\"dark\" style={{ marginRight: '10px' }} type=\"submit\">Submit</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Form>\r\n                }\r\n            </Col>\r\n            <Col sm={3}></Col>\r\n        </Row>\r\n    </>\r\n}\r\n\r\nexport default UserAccount"],"sourceRoot":""}